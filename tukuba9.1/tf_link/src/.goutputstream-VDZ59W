/**
 * @file   tf_link_node.cpp
 * @brief  transform broadcaster for robot infomation
 * @author Kei SUGAWARA
 * @date   2013.11.6
 *
 * @par Update Information
 * - 2013.11.6
 *  # Initial Version
 *
 */

#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <std_msgs/Float64.h>
#include <nav_msgs/Odometry.h>

namespace {

	// lidar front
	tf::TransformBroadcaster *front_lidar;

	// lidar rear
	tf::TransformBroadcaster *rear_lidar;

	// odmetry

	tf::TransformBroadcaster *odometry;

	// gps
	//tf::TransformBroadcaster *gps;
	
} // namespace


void broadcastTF(tf::TransformBroadcaster *tf_broadcaster, 
				double x, double y, double z, 
				double roll, double pitch, double yaw, 
				std::string frame, std::string child_frame)
{

	// 姿勢をクォータニオンに変換
	tf::Quaternion tf_quat;
	tf_quat.setRPY(roll, pitch, yaw);
	geometry_msgs::Quaternion geom_quat;
	tf::quaternionTFToMsg(tf_quat, geom_quat);

	// フレームの設定
	geometry_msgs::TransformStamped static_tf;
	static_tf.header.stamp = ros::Time::now();
	static_tf.header.frame_id = frame;
	static_tf.child_frame_id = child_frame;
	
	// 原点と姿勢の設定
	static_tf.transform.translation.x = x;
	static_tf.transform.translation.y = y;
	static_tf.transform.translation.z = z;
	static_tf.transform.rotation = geom_quat;

	tf_broadcaster->sendTransform(static_tf);
}

void broadcastTF(tf::TransformBroadcaster *tf_broadcaster, 
				double x, double y, double z, 
				geometry_msgs::Quaternion quat,
				std::string frame, std::string child_frame)
{
	// フレームの設定
	geometry_msgs::TransformStamped static_tf;
	static_tf.header.stamp = ros::Time::now();
	static_tf.header.frame_id = frame;
	static_tf.child_frame_id = child_frame;
	
	// 原点と姿勢の設定
	static_tf.transform.translation.x = x;
	static_tf.transform.translation.y = y;
	static_tf.transform.translation.z = z;
	static_tf.transform.rotation = quat;

	tf_broadcaster->sendTransform(static_tf);
}

void lidarCallback(const std_msgs::Float64 angle)
{
	double lidar_angle = -angle.data*M_PI/180; // degree to rad
	
	//
	broadcastTF(front_lidar, -0.28, 0, 1.34, 0, lidar_angle, 0, "base_link", "front_link");
	broadcastTF(front_lidar, 0, 0, 0.08, 0, 0, 0, "front_link", "front_laser");
	
	//
	broadcastTF(rear_lidar, -0.57, 0, 1.34, 0, lidar_angle, M_PI, "base_link", "rear_link");
	broadcastTF(rear_lidar, 0, 0, 0.08, 0, 0, 0, "rear_link", "rear_laser");
}
void odometryCallback(const nav_msgs::Odometry odom)
{
	double x = odom.pose.pose.position.x;
	double y = odom.pose.pose.position.y;
	double z = odom.pose.pose.position.z;
	geometry_msgs::Quaternion quat = odom.pose.pose.orientation;
	broadcastTF(odometry, x, y, z, quat, "odom", "base_link"); 
}

int main(int argc, char** argv)
{
	ros::init(argc, argv, "tf_link_node");

	front_lidar = new tf::TransformBroadcaster;
	rear_lidar = new tf::TransformBroadcaster;
	odometry = new tf::TransformBroadcaster;

	// LiDARの設定
	ros::NodeHandle nh;
	ros::Subscriber lidar_sub = nh.subscribe<std_msgs::Float64>("/lidar_angle",100,lidarCallback);
	ros::Subscriber odom_sub = nh.subscribe<nav_msgs::Odometry>("/odom",100,odometryCallback);

	//camera
	tf::TransformBroadcaste *stereo_tf;
	ros::Rate r(50);
	
		const double cam_height = 1.25;	//[m]
	const double cam_pitch = 18*M_PI/180;	//[rad]
	//const double cam_pitch = 29*M_PI/180;	//[rad]

	//const tf::Quaternion cam_rotate(-M_PI/2,-0.5*M_PI/180,-M_PI/2-cam_pitch);
	const tf::Quaternion cam_rotate(M_PI/2+cam_pitch,0,-M_PI/2);
	const tf::Vector3 cam_right_position(-0.26,-0.12,cam_height);
	const tf::Vector3 cam_center_position(-0.26,0.11,cam_height);
	const tf::Vector3 cam_left_position(-0.26,0.12,cam_height);
	
	while(ros::ok()){
		stereo_tf.sendTransform(tf::StampedTransform(tf::Transform(cam_rotate,cam_center_position),
													 ros::Time::now(),
													 "base_link",
													 "camera"));
		r.sleep();
	}
	//
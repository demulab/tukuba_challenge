/* Auto-generated by genmsg_cpp for file /home/demulab/tukuba_ws/src/tukuba9.1/readWayPoints/srv/AllWayPoints.srv */
#ifndef READWAYPOINTS_SERVICE_ALLWAYPOINTS_H
#define READWAYPOINTS_SERVICE_ALLWAYPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Pose.h"

namespace readWayPoints
{
template <class ContainerAllocator>
struct AllWayPointsRequest_ {
  typedef AllWayPointsRequest_<ContainerAllocator> Type;

  AllWayPointsRequest_()
  {
  }

  AllWayPointsRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AllWayPointsRequest
typedef  ::readWayPoints::AllWayPointsRequest_<std::allocator<void> > AllWayPointsRequest;

typedef boost::shared_ptr< ::readWayPoints::AllWayPointsRequest> AllWayPointsRequestPtr;
typedef boost::shared_ptr< ::readWayPoints::AllWayPointsRequest const> AllWayPointsRequestConstPtr;



template <class ContainerAllocator>
struct AllWayPointsResponse_ {
  typedef AllWayPointsResponse_<ContainerAllocator> Type;

  AllWayPointsResponse_()
  : waypoints()
  {
  }

  AllWayPointsResponse_(const ContainerAllocator& _alloc)
  : waypoints(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _waypoints_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  waypoints;


  typedef boost::shared_ptr< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AllWayPointsResponse
typedef  ::readWayPoints::AllWayPointsResponse_<std::allocator<void> > AllWayPointsResponse;

typedef boost::shared_ptr< ::readWayPoints::AllWayPointsResponse> AllWayPointsResponsePtr;
typedef boost::shared_ptr< ::readWayPoints::AllWayPointsResponse const> AllWayPointsResponseConstPtr;


struct AllWayPoints
{

typedef AllWayPointsRequest Request;
typedef AllWayPointsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AllWayPoints
} // namespace readWayPoints

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "readWayPoints/AllWayPointsRequest";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b79019e7b9c24c2da4cedca4ef33b347";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb79019e7b9c24c2dULL;
  static const uint64_t static_value2 = 0xa4cedca4ef33b347ULL;
};

template<class ContainerAllocator>
struct DataType< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "readWayPoints/AllWayPointsResponse";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose[] waypoints\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::readWayPoints::AllWayPointsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AllWayPointsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::readWayPoints::AllWayPointsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.waypoints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AllWayPointsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<readWayPoints::AllWayPoints> {
  static const char* value() 
  {
    return "b79019e7b9c24c2da4cedca4ef33b347";
  }

  static const char* value(const readWayPoints::AllWayPoints&) { return value(); } 
};

template<>
struct DataType<readWayPoints::AllWayPoints> {
  static const char* value() 
  {
    return "readWayPoints/AllWayPoints";
  }

  static const char* value(const readWayPoints::AllWayPoints&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<readWayPoints::AllWayPointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b79019e7b9c24c2da4cedca4ef33b347";
  }

  static const char* value(const readWayPoints::AllWayPointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<readWayPoints::AllWayPointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "readWayPoints/AllWayPoints";
  }

  static const char* value(const readWayPoints::AllWayPointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<readWayPoints::AllWayPointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b79019e7b9c24c2da4cedca4ef33b347";
  }

  static const char* value(const readWayPoints::AllWayPointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<readWayPoints::AllWayPointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "readWayPoints/AllWayPoints";
  }

  static const char* value(const readWayPoints::AllWayPointsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // READWAYPOINTS_SERVICE_ALLWAYPOINTS_H


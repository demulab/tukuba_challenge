/* Auto-generated by genmsg_cpp for file /home/demulab/tukuba_ws/src/tukuba9.1/fog/srv/FOG.srv */
#ifndef FOG_SERVICE_FOG_H
#define FOG_SERVICE_FOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace fog
{
template <class ContainerAllocator>
struct FOGRequest_ {
  typedef FOGRequest_<ContainerAllocator> Type;

  FOGRequest_()
  : order(0)
  {
  }

  FOGRequest_(const ContainerAllocator& _alloc)
  : order(0)
  {
  }

  typedef int32_t _order_type;
  int32_t order;


  typedef boost::shared_ptr< ::fog::FOGRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fog::FOGRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FOGRequest
typedef  ::fog::FOGRequest_<std::allocator<void> > FOGRequest;

typedef boost::shared_ptr< ::fog::FOGRequest> FOGRequestPtr;
typedef boost::shared_ptr< ::fog::FOGRequest const> FOGRequestConstPtr;



template <class ContainerAllocator>
struct FOGResponse_ {
  typedef FOGResponse_<ContainerAllocator> Type;

  FOGResponse_()
  : response_header(0)
  , theta(0.0)
  {
  }

  FOGResponse_(const ContainerAllocator& _alloc)
  : response_header(0)
  , theta(0.0)
  {
  }

  typedef int32_t _response_header_type;
  int32_t response_header;

  typedef double _theta_type;
  double theta;


  typedef boost::shared_ptr< ::fog::FOGResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fog::FOGResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct FOGResponse
typedef  ::fog::FOGResponse_<std::allocator<void> > FOGResponse;

typedef boost::shared_ptr< ::fog::FOGResponse> FOGResponsePtr;
typedef boost::shared_ptr< ::fog::FOGResponse const> FOGResponseConstPtr;


struct FOG
{

typedef FOGRequest Request;
typedef FOGResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FOG
} // namespace fog

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fog::FOGRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fog::FOGRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fog::FOGRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6889063349a00b249bd1661df429d822";
  }

  static const char* value(const  ::fog::FOGRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6889063349a00b24ULL;
  static const uint64_t static_value2 = 0x9bd1661df429d822ULL;
};

template<class ContainerAllocator>
struct DataType< ::fog::FOGRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fog/FOGRequest";
  }

  static const char* value(const  ::fog::FOGRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fog::FOGRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 order\n\
\n\
";
  }

  static const char* value(const  ::fog::FOGRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fog::FOGRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::fog::FOGResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::fog::FOGResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::fog::FOGResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25eae6c1472975ef6cf583855da43f52";
  }

  static const char* value(const  ::fog::FOGResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x25eae6c1472975efULL;
  static const uint64_t static_value2 = 0x6cf583855da43f52ULL;
};

template<class ContainerAllocator>
struct DataType< ::fog::FOGResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fog/FOGResponse";
  }

  static const char* value(const  ::fog::FOGResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fog::FOGResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 response_header\n\
float64 theta\n\
\n\
\n\
";
  }

  static const char* value(const  ::fog::FOGResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fog::FOGResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fog::FOGRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.order);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FOGRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fog::FOGResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response_header);
    stream.next(m.theta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FOGResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fog::FOG> {
  static const char* value() 
  {
    return "2e715789d036161918201e028e4b49b7";
  }

  static const char* value(const fog::FOG&) { return value(); } 
};

template<>
struct DataType<fog::FOG> {
  static const char* value() 
  {
    return "fog/FOG";
  }

  static const char* value(const fog::FOG&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fog::FOGRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e715789d036161918201e028e4b49b7";
  }

  static const char* value(const fog::FOGRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fog::FOGRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fog/FOG";
  }

  static const char* value(const fog::FOGRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fog::FOGResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e715789d036161918201e028e4b49b7";
  }

  static const char* value(const fog::FOGResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fog::FOGResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fog/FOG";
  }

  static const char* value(const fog::FOGResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FOG_SERVICE_FOG_H

